name: Deploy to EC2

on:
  push:
    branches:
      - master  # Ensure this matches your branch name

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Check if artifact exists
      id: check_artifact
      run: |
        if curl --head --silent --fail https://api.github.com/repos/${{ github.repository }}/actions/artifacts | grep -q "terraform-state"; then
          echo "artifact_exists=true" >> $GITHUB_ENV
        else
          echo "artifact_exists=false" >> $GITHUB_ENV
        fi

    - name: Download Terraform state file
      if: env.artifact_exists == 'true'
      uses: actions/download-artifact@v4
      with:
        name: terraform-state
        path: ./

    - name: Terraform Init
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Plan
      run: terraform plan -input=false
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Terraform Apply
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Upload Terraform state file
      uses: actions/upload-artifact@v4
      with:
        name: terraform-state
        path: ./terraform.tfstate
        retention-days: 90  # Optional: Specify retention period

  deploy:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2  # Replace with your region

    - name: Query EC2 instance public IP
      id: ec2info
      run: |
        INSTANCE_ID=$(terraform output -raw instance_id)
        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

    - name: SSH into EC2 and deploy
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ env.PUBLIC_IP }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo docker pull python:3.8-slim
          sudo docker stop my-python-container || true
          sudo docker rm my-python-container || true
          sudo docker run -d --name my-python-container -p 80:80 python:3.8-slim